import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import threading
import queue


class DatabaseManager:
    def __init__(self, db_name="EKG13.db"):
        try:
            self.connection = sqlite3.connect(db_name)
            self.cursor = self.connection.cursor()
            self.create_tables()
        except sqlite3.Error as e:
            messagebox.showerror("Database Connection Error", f"Error connecting to database: {e}")

    def create_tables(self):
        try:
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS Patient (
                        CPR INTEGER PRIMARY KEY,
                        Navn TEXT,
                        Alder INTEGER,
                        Sygdom TEXT
                    )''')

            self.cursor.execute('''CREATE TABLE IF NOT EXISTS EKGMåling (
                        ID INTEGER PRIMARY KEY AUTOINCREMENT,
                        Person_id INTEGER,
                        ECGValue REAL,
                        TimeStamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (Person_id) REFERENCES Patient(CPR)
                    )''')
            self.connection.commit()
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error creating tables: {e}")

    def insert_patient(self, cpr, navn, alder, sygdom):
        try:
            self.cursor.execute("INSERT INTO Patient (CPR, Navn, Alder, Sygdom) VALUES (?, ?, ?, ?)",
                                (cpr, navn, alder, sygdom))
            self.connection.commit()
            return True
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error inserting patient: {e}")
            return False

    def get_person_id(self, cpr):
        try:
            self.cursor.execute("SELECT CPR FROM Patient WHERE CPR = ?", (cpr,))
            result = self.cursor.fetchone()
            if result:
                return result[0]
            else:
                return None
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error fetching Person_id: {e}")
            return None

    def insert_ekg_measurement(self, cpr, ecg_value):
        try:
            person_id = self.get_person_id(cpr)
            if person_id:
                self.cursor.execute("INSERT INTO EKGMåling (Person_id, ECGValue) VALUES (?, ?)", (person_id, ecg_value))
                self.connection.commit()
                return True
            else:
                messagebox.showerror("Error", "CPR not found in Patient table.")
                return False
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error inserting EKG measurement: {e}")
            return False

    def get_all_patients(self):
        try:
            self.cursor.execute("SELECT * FROM Patient")
            return self.cursor.fetchall()
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error fetching patients: {e}")
            return []

    def close(self):
        try:
            self.connection.close()
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Error closing database connection: {e}")


import tkinter as tk
import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import threading
import queue


class ECGPlotter:
    def __init__(self, parent, port, baudrate, max_samples, db_manager, selected_cpr):
        self.parent = parent
        self.port = port
        self.baudrate = baudrate
        self.max_samples = max_samples
        self.data_queue = queue.Queue()
        self.ys = [0] * max_samples
        self.selected_cpr = selected_cpr
        self.db_manager = db_manager
        self.current_bpm = 0

        self.fig, self.ax = plt.subplots(figsize=(10, 6))
        self.xs = list(range(max_samples))
        self.line, = self.ax.plot(self.xs, self.ys)
        self.ax.set_ylim(0, 1023)
        self.ax.set_title('Simulated ECG Data')
        self.ax.set_xlabel('Samples')
        self.ax.set_ylabel('ECG Value')

        self.text_bpm = self.ax.text(0.85, 0.95, '', transform=self.ax.transAxes, fontsize=14,
                                     verticalalignment='top')

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.parent)
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.serial_thread = threading.Thread(target=self.serial_reader, daemon=True)
        self.serial_thread.start()

        self.ani = animation.FuncAnimation(self.fig, self.update_plot, interval=1000 / 60)  # 60 FPS

    def serial_reader(self):
        try:
            with serial.Serial(self.port, self.baudrate, timeout=1) as ser:
                while True:
                    data = ser.readline().strip()
                    if data:
                        try:
                            ecg_value = float(data.decode())
                            self.data_queue.put(ecg_value)
                        except ValueError:
                            print(f"Ignoring invalid data: {data}")
        except serial.SerialException as e:
            messagebox.showerror("Serial Error", f"Error reading from serial port: {e}")

    def update_plot(self, frame):
        while not self.data_queue.empty():
            ecg_value = self.data_queue.get()
            self.ys.append(ecg_value)
            if len(self.ys) > self.max_samples:
                self.ys.pop(0)

            if self.selected_cpr:
                self.db_manager.insert_ekg_measurement(self.selected_cpr, ecg_value)

        # Update BPM calculation
        self.update_bpm()

        self.line.set_ydata(self.ys)
        self.text_bpm.set_text(f'Current BPM: {int(self.current_bpm)}')
        self.canvas.draw()
        return self.line, self.text_bpm

    def update_bpm(self):
        # Find peaks (R-waves) by simple thresholding
        peaks = self.detect_peaks(self.ys, threshold=700)  # Adjust threshold as needed
        fs = 200
        # Calculate time intervals between consecutive peaks
        time_intervals = []
        for i in range(1, len(peaks)):
            time_interval = (peaks[i] - peaks[i - 1]) / fs  # Assuming fs = 200 Hz
            time_intervals.append(time_interval)

        # Calculate average time interval
        if time_intervals:
            avg_time_interval = sum(time_intervals) / len(time_intervals)
            # Calculate BPM (beats per minute)
            if avg_time_interval > 0:
                self.current_bpm = 60 / avg_time_interval
                print(f"Average BPM: {self.current_bpm:.2f}")
            else:
                print("Cannot calculate BPM: No valid R-waves found in the last plot.")
        else:
            print("No R-waves found in the last plot.")

    def detect_peaks(self, data, threshold):
        peaks = []
        for i in range(1, len(data) - 1):
            if data[i] > threshold and data[i] > data[i - 1] and data[i] > data[i + 1]:
                peaks.append(i)
        return peaks


class EKG_GUI:
    def __init__(self, window):
        self.window = window
        self.window.title("EKG GUI")
        self.window.geometry("450x400")

        self.db_manager = DatabaseManager()
        self.create_widgets()

    def create_widgets(self):
        self.label_hils = tk.Label(self.window, text="Velkommen til din Elektronisk patientjournal.")
        self.label_hils.pack(anchor='w', padx=10, pady=10)

        self.label_info = tk.Label(self.window, text="Log på for at tilgå patientjournalen.")
        self.label_info.pack(pady=10)

        self.button_log = tk.Button(self.window, text="Log på", command=self.login)
        self.button_log.pack(pady=5)

    def login(self):
        self.label_brugernavn = tk.Label(self.window, text="Brugernavn:")
        self.label_brugernavn.pack(pady=5)
        self.entry_brugernavn = tk.Entry(self.window)
        self.entry_brugernavn.pack(pady=5)

        self.label_password = tk.Label(self.window, text="Adgangskode:")
        self.label_password.pack(pady=5)
        self.entry_password = tk.Entry(self.window, show="*")
        self.entry_password.pack(pady=5)

        self.button_login = tk.Button(self.window, text="Login", fg='blue', command=self.login_læge)
        self.button_login.pack(pady=5)

        self.button_log.config(state=tk.DISABLED)

    def login_læge(self):
        brugernavn = self.entry_brugernavn.get()
        password = self.entry_password.get()

        if brugernavn == "p2233" and password == "2244":
            self.clear_window()

            self.button_patient = tk.Button(self.window, text='Patientjournal', command=self.show_patient)
            self.button_patient.pack(pady=10, padx=20, anchor="n")

        else:
            messagebox.showerror("Login mislykkedes!", "Forkert brugernavn eller adgangskode.")

    def clear_window(self):
        for widget in self.window.winfo_children():
            widget.pack_forget()

    def show_patient(self):
        popup = tk.Toplevel(self.window)
        popup.title("Patient")

        self.button_insert_patient = tk.Button(popup, text='Indsæt Patient', command=self.insert_patient_window)
        self.button_insert_patient.pack(pady=10, padx=20, anchor="n")

        self.button_vis_patient = tk.Button(popup, text='Vis Patienter', command=self.vis_patient_data)
        self.button_vis_patient.pack(pady=10, padx=20, anchor="n")

        self.button_vis_ekg = tk.Button(popup, text='EKG-data', command=self.show_ekg_data)
        self.button_vis_ekg.pack(pady=10, padx=20, anchor="n")

    def insert_patient_window(self):
        self.popup_window = tk.Toplevel(self.window)
        self.popup_window.title("Indsæt Patient")
        self.label_cpr = tk.Label(self.popup_window, text="CPR:")
        self.label_cpr.grid(row=0, column=0, padx=5, pady=5)
        self.entry_cpr = tk.Entry(self.popup_window)
        self.entry_cpr.grid(row=0, column=1, padx=5, pady=5)

        self.label_navn = tk.Label(self.popup_window, text="Navn:")
        self.label_navn.grid(row=1, column=0, padx=5, pady=5)
        self.entry_navn = tk.Entry(self.popup_window)
        self.entry_navn.grid(row=1, column=1, padx=5, pady=5)

        self.label_alder = tk.Label(self.popup_window, text="Alder:")
        self.label_alder.grid(row=2, column=0, padx=5, pady=5)
        self.entry_alder = tk.Entry(self.popup_window)
        self.entry_alder.grid(row=2, column=1, padx=5, pady=5)

        self.label_sygdom = tk.Label(self.popup_window, text="Sygdom:")
        self.label_sygdom.grid(row=3, column=0, padx=5, pady=5)
        self.entry_sygdom = tk.Entry(self.popup_window)
        self.entry_sygdom.grid(row=3, column=1, padx=5, pady=5)

        tk.Button(self.popup_window, text="Gem Patient", command=self.save_patient).grid(row=4, columnspan=2, padx=10,
                                                                                         pady=10)

    def save_patient(self):
        navn = self.entry_navn.get()
        cpr = self.entry_cpr.get()
        alder = self.entry_alder.get()
        sygdom = self.entry_sygdom.get()

        if len(cpr) != 10 or not cpr.isdigit():
            tk.messagebox.showerror("Fejl", "CPR skal være præcis 10 tal.")
            return

        if cpr and navn and alder and sygdom:
            if self.db_manager.insert_patient(cpr, navn, alder, sygdom):
                tk.messagebox.showinfo("Success", "Patient data gemt.")
                self.popup_window.destroy()
            else:
                tk.messagebox.showerror("Fejl", "Kunne ikke gemme patient data.")
        else:
            tk.messagebox.showerror("Fejl", "Udfyld venligst alle felter.")

    def vis_patient_data(self):
        patients = self.db_manager.get_all_patients()

        popup = tk.Toplevel(self.window)
        popup.title("Patient Data")

        tree = ttk.Treeview(popup, columns=("navn", "cpr", "alder", "sygdom"), show="headings")
        tree.heading("navn", text="Navn")
        tree.heading("cpr", text="CPR")
        tree.heading("alder", text="Alder")
        tree.heading("sygdom", text="Sygdom")

        for patient in patients:
            tree.insert("", tk.END, values=(patient[1], patient[0], patient[2], patient[3]))

        tree.pack(fill="both", expand=True)

    def show_ekg_data(self):
        self.popup_window = tk.Toplevel(self.window)
        self.popup_window.title("EKG Data")

        self.label_cpr = tk.Label(self.popup_window, text="Vælg CPR:")
        self.label_cpr.grid(row=0, column=0, padx=5, pady=5)

        self.cpr_combobox = ttk.Combobox(self.popup_window, state="readonly", width=25)
        self.cpr_combobox.grid(row=0, column=1, padx=5, pady=5)

        patients = self.db_manager.get_all_patients()
        cpr_list = [str(patient[0]) for patient in patients]
        self.cpr_combobox['values'] = cpr_list

        tk.Button(self.popup_window, text="Vis EKG", command=self.start_ecg_plot).grid(row=1, columnspan=2, padx=10,
                                                                                       pady=10)

    def start_ecg_plot(self):
        selected_cpr = self.cpr_combobox.get()
        if not selected_cpr:
            messagebox.showerror("Fejl", "Vælg venligst et CPR-nummer fra listen.")
            return

        port = '/dev/tty.usbmodem1101'  # Adjust this according to your serial port
        baudrate = 9600
        max_samples = 500

        plot_frame = tk.Frame(self.popup_window)
        plot_frame.grid(row=2, columnspan=2, padx=10, pady=10, sticky='nsew')

        self.ecg_plotter = ECGPlotter(plot_frame, port, baudrate, max_samples, self.db_manager, selected_cpr)


if __name__ == "__main__":
    window = tk.Tk()
    app = EKG_GUI(window)
    window.mainloop()
    app.db_manager.close()
